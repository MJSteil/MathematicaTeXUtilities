<?xml version="1.0"?>
<project name="BuildDocumentation" default="main" basedir="..">
    
    <property name="scriptsDir" value="${basedir}/buildScripts" />
    <property file="${scriptsDir}/build.properties"/>
    <property file="${scriptsDir}/buildDefault.properties"/>
    <property file="${scriptsDir}/system.properties"/>
    
    <target name="clean">
        <delete  dir="${dist}" />
    </target>
    
    <target name="docbuild">

<!--
If you want to create HTML you should always set Mathematica.DocumentationBuild.createHTML
or set Mathematica.DocumentationBuild.createHTML.setting to Mathematica.DocumentationBuild.createHTML.
-->
        <property name="${Mathematica.DocumentationBuild.createHTML.setting}" value="true" />   

        <echo message="DocumentationBuild: ${appPath}"/>
        <echo message="Mathematica Install Dir: ${mathematicaInstallDir}"/>
        <echo message="MathKernel: ${mathExe}"/>
        <echo message="Input: ${inputDir}"/>
        <echo message="Output NB: ${outputDirNB}"/>
        <echo message="Output Web: ${outputDirWeb}"/>

        <path id="jlink.lib">
            <fileset dir="${jlinkpath}">
                <include name="**/JLink.jar"/>
                <include name="**/SystemFiles/*"/>
            </fileset>
        </path>

        <!-- Load JLink -->
        <taskdef name="mathematica" classname="com.wolfram.jlink.util.MathematicaTask" >
            <classpath refid="jlink.lib" />
        </taskdef>

        <property name="JLinkLoaded" value="true"/>
        
        <ant antfile="${appPath}/DocumentationBuild/SystemFiles/ant/Build/notebook.xml" target="main">
            <property name="outputDir" value="${outputDirNB}" />
            <property name="language" value="English" />
        </ant>

        <antcall target="createHTML" />
        
        <antcall target="setupPaclet" />
        
        <antcall target="crossVersionReplacements" />

        <antcall target="replaceStuffNB" />
        
        <antcall target="replaceStuffHTML" />
        
    </target>

    <target name="createHTML" if="Mathematica.DocumentationBuild.createHTML">
        <ant antfile="${appPath}/DocumentationBuild/SystemFiles/ant/Build/html.xml" target="main">
            <property name="local" value="True"/>
            <property name="completeHTMLQ" value="True"/>
            <property name="includeLinkTrails" value="False"/>
            <property name="outputDir" value="${outputDirWeb}" />
            <property name="language" value="English" />
        </ant>    
    </target>
    
    <target name="setupPaclet" if="buildNBDocs">    
        <copy file="${basedir}/PacletInfo.m" todir="${dist}/${pacletContainer}" overwrite="true" />
        <copy todir="${dist}/${pacletContainer}/${docOutputDir}" overwrite="true" >
        <fileset dir="${basedir}/${docInputDir}">
            <exclude name="*/Guides/**"/>
            <exclude name="*/ReferencePages/**"/>
            <exclude name="*/Tutorials/**"/>
        </fileset>
        </copy>
    </target>
    
    <target name="main" depends="clean">
        <antcall target="docbuild" />
    </target>
    
    <target name="crossVersionReplacements">
        <!--
        By Simon Rochester
        http://mathematica.stackexchange.com/questions/28316/creating-cross-version-compatible-documentation-with-workbench#answer-28592
        -->
        <mathematica exe="${mathExe}">
            <![CDATA[

            (* Start Front End *)
            Developer`InstallFrontEnd[];

            (* Get all .nb files from build directory *)
            outputDir = AntProperty["dist"];
          files = FileNames["*.nb", outputDir, Infinity];

            AntLog["Running cross-version replacements on "<>ToString@Length@files<>" files in "<>outputDir];

            (* Function to discriminate between versions 6--8 and 9 *)
            IfPreVer9[pre_, post_] := FEPrivate`If[             
               FEPrivate`Or[FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"],
                                FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"],
                            FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], 
               pre, post];

            (* Section spacer that displays as very thin cell in versions 6--8 *)
            mySectionSpacer[sty_] := Cell["", sty,
                    CellSize -> IfPreVer9[{Inherited, 1}, Inherited],
                    CellElementSpacings -> {CellMinHeight -> 
                  IfPreVer9[1, Inherited]},
                    CellMargins -> IfPreVer9[0, Inherited],
                    Editable -> False, Selectable -> False, Deletable -> False, 
               ShowCellBracket -> False, ShowSelection -> False];

            (* List of styles for section headings that we will do replacements on *)
            headingStyles = {
                  "GuideMoreAboutSection", 
                   "GuideTutorialsSection", "MoreAboutSection", 
                   "MoreInformationSection",
                   "PrimaryExamplesSection", "RelatedDemonstrationsSection", 
                   "RelatedLinksSection", "SeeAlsoSection", 
                   "TutorialsSection", 
                   "RelatedTutorialsSection", "TutorialMoreAboutSection",
                   "TutorialRelatedLinksSection", "NotesSection", 
                     "GuideRelatedLinksSection"
              };

            (* Utility functions*)
            myspacer = Cell[BoxData[ToBoxes[Spacer[24]]]];

            toTitleCase[str_String] := 
              StringReplace[ToLowerCase[str], 
               WordBoundary ~~ x_ :> ToUpperCase[x]];

            framelabelopts = {CellSize -> {5000, Inherited}};

            cellopts = {"WholeCellGroupOpener" -> True, 
               CellFrameLabelMargins -> 0, 
               CellElementSpacings -> {"CellMinHeight" -> 3}, 
               CellSize -> {Inherited, IfPreVer9[11, 14]}};

            (* Loop over files *)
            Do[
              (* Importing nb files containing Manipulate objects can throw a bunch of benign newline interpretation warnings *)
              Quiet[expr = Get[file];, Syntax::newl];

              (* Convert section headings to Title Case in version 9 *)
                expr = expr /. {
                (*"MORE INFORMATION" section-- get rid of frame*)
                Cell[con_, sty : "NotesSection", o___] :> 
                 Cell["", sty, Sequence @@ cellopts, o, CellFrameLabels -> {{
                     IfPreVer9[
                      Cell[con, sty, Sequence @@ framelabelopts], 
                      con /. TextData[Cell[BoxData[box : ButtonBox[__]]]] :> TextData[box] /. 
                       box_FrameBox -> 
                        Cell[TextData[{myspacer, "Details and Options"}], 
                         "NotesSection", Sequence @@ framelabelopts]
                      ], None}, {None, None}}],
                (*Guide Tutorials section-- need to mimic standard version 9 section style*)
                Cell[con_, sty : "GuideTutorialsSection", o___] :> 
                 Cell["", sty, Sequence @@ cellopts, o, 
                  CellMargins -> 
                   IfPreVer9[Inherited, {{Inherited, Inherited}, {Inherited, 20}}], 
                  CellFrameLabels -> {{
                     IfPreVer9[
                      Cell[con, sty, Sequence @@ framelabelopts], 
                      con /. str_String -> 
                        Cell[TextData[{myspacer, toTitleCase[str]}], sty, 
                         Sequence @@ framelabelopts]
                      ], None}, {None, None}}],
                (*Examples section-- add placeholder for total example count*)
                Cell[con_, sty : "PrimaryExamplesSection", o___] :> 
                 Cell["", sty, o, Sequence @@ cellopts, CellFrameLabels -> {{
                     IfPreVer9[
                      Cell[con, sty, Sequence @@ framelabelopts], 
                      con /. (ButtonBox[str_String, bbo___] :> 
                         ButtonBox[
                          Cell[TextData[{myspacer, toTitleCase[str], "  ", 
                             "InsertExampleCount"}], sty, 
                           Sequence @@ framelabelopts], bbo])
                      ], None}, {None, None}}],
                (*All other section headings with text only in the title*)
                Cell[con_String, sty : Alternatives @@ headingStyles, o___] :> 
                 Cell["", sty, Sequence @@ cellopts, o, CellFrameLabels -> {{
                     IfPreVer9[
                      Cell[con, sty, Sequence @@ framelabelopts],
                      Cell[TextData[{myspacer, toTitleCase[con]}], sty, 
                       Sequence @@ framelabelopts]
                      ], None}, {None, None}}],
                (*All other section headings with buttons in the title*)
                Cell[con_, sty : Alternatives @@ headingStyles, o___] :> 
                 Cell["", sty, Sequence @@ cellopts, o, CellFrameLabels -> {{
                     IfPreVer9[
                      Cell[con, sty, Sequence @@ framelabelopts], 
                      con /. (ButtonBox[str_String, bbo___] :> 
                         ButtonBox[
                          Cell[TextData[{myspacer, toTitleCase[str]}], sty, 
                           Sequence @@ framelabelopts], bbo])
                      ], None}, {None, None}}]
              };

              (* Replace "Details and Options" with "Details" if there is no mention of options in the notes section *)
              expr = expr /. 
                 notescell : CellGroupData[{Cell["", "NotesSection", ___], ___}, ___] :> 
                 (notescell /. If[
                   Count[notescell, str_String /; ! StringFreeQ[str, {"option", "Option"}], Infinity] > 1, 
                       {}, 
                   "Details and Options" -> "Details"
                  ]);

            (* Add total example count to Examples section heading in version 9 *)
            expr = expr /. (examplegroup : Cell[CellGroupData[{Cell[_, "PrimaryExamplesSection", ___], ___}, ___], ___]) :>
              (examplegroup /. "InsertExampleCount" -> 
                Cell["(" <> 
                  ToString[Total@Cases[examplegroup, Cell[countstring_, "ExampleCount"] :> ToExpression[countstring], Infinity]] <> 
                  ")", "ExampleCount"]
               );

            (* Add spacers before and after section content in version 9 *)
            expr = expr /. {Cell[
              CellGroupData[{c1 : Cell[_, "SeeAlsoSection", ___], c2__}, o2___], o3___] :> 
                Cell[CellGroupData[{c1, c2}, o2], o3], 
              Cell[CellGroupData[{c1 : Cell[_, "PrimaryExamplesSection", ___], c2__}, o2___], o3___] :> 
                Cell[CellGroupData[{c1, c2, mySectionSpacer["SectionFooterSpacer"]}, o2], o3],                  
              Cell[CellGroupData[{c1 : Cell[_, Alternatives @@ headingStyles, ___], c2__}, o2___], o3___] :> 
                Cell[CellGroupData[{c1, mySectionSpacer["SectionHeaderSpacer"], c2, mySectionSpacer["SectionFooterSpacer"]}, o2], o3]};


              (*Fix button behavior in Example subsections*)
              expr = expr /. 
                Cell[con__, sty : "ExampleSection" | "ExampleSubsection", o___] :> 
                  Cell[con, sty, "WholeCellGroupOpener" -> True, o];        

            (*Fix rendering bug pre-version 9 *)
            expr = expr /. 
              Cell[c_, "GuideAbstract", o___] :> 
                Cell[c, "GuideAbstract", CellFrame -> IfPreVer9[{{0, 0}, {1, 0}}, Inherited], o];

            (* Improve font appearance for tutorial links in Guide pages, and mimic section heading style for Guide Tutorial heading *)
            expr = expr /. {"GuideTutorial" -> "GuideMoreAbout", "GuideTutorialsSection" -> "GuideMoreAboutSection"};

            (* Save notebook using Front End *)
            Developer`UseFrontEnd[
                With[
                    {nb = NotebookPut[expr]}
                    ,
                    SetOptions[
                        nb
                        , 
                         PrivateNotebookOptions -> 
                              Prepend[
                                FilterRules[
                                    Flatten @ Cases[
                                        Options[nbObj],
                                        HoldPattern[PrivateNotebookOptions -> value_] :> value,
                                        {1},
                                        1
                                    ]
                                    ,
                                    Except["FileOutlineCache"]
                                   ]
                                ,
                                "FileOutlineCache" -> False]
                            ];
                    NotebookSave[nb, file];
                    NotebookClose[nb];
                ]
            ];
            
            ,

            {file, files}];
            ]]>
        </mathematica>
    </target>

    <!--
    By Teake Nutma
    http://mathematica.stackexchange.com/questions/28316/creating-cross-version-compatible-documentation-with-workbench#answer-28358
    https://github.com/xAct-contrib/xTras/tree/master/buildfiles
    -->
    <target name="replaceStuffNB">
        <echo>Changing FrontEndVersion to 6.0</echo>
        <replaceregexp match='FrontEndVersion(\s*)->(\s*)"([^"]*)"' replace='FrontEndVersion -> "6.0"' flags="gs">
            <fileset dir="${outputDirNB}" includes="**/*.nb"/>
        </replaceregexp>
        
        <echo>Replacing "Te X Utilities" with "TeX Utilities" in notebooks</echo>
        <replace dir="${outputDirNB}" value='TEX UTILITIES' summary="true">
            <include name="**/*.nb"/>
            <replacetoken>TE X UTILITIES</replacetoken>
        </replace>
        <replace dir="${outputDirNB}" value='TeX Utilities' summary="true">
            <include name="**/*.nb"/>
            <replacetoken>Te X Utilities</replacetoken>
        </replace>
    </target>
    
    <target name="replaceStuffHTML" if="Mathematica.DocumentationBuild.createHTML">
        <echo>Replacing "Te X Utilities" with "TeX Utilities" in webpages</echo>
        <replace dir="${outputDirWeb}" value='TeX Utilities' summary="true">
            <include name="**/*.html"/>
            <replacetoken>Te X Utilities</replacetoken>
        </replace>
        
        <echo>Replacing absolute URLs with relative URLs in webpages</echo>
        <replace dir="${outputDirWeb}" value='a href="../' summary="true">
            <include name="**/*.html"/>
            <replacetoken>a href="http://reference.wolfram.com/mathematica/TeXUtilities/</replacetoken>
        </replace>
        <replace dir="${outputDirWeb}" value='a href="../' summary="true">
            <include name="**/*.html"/>
            <replacetoken>a href="/mathematica/TeXUtilities/</replacetoken>
        </replace>
    </target>

    
</project>

